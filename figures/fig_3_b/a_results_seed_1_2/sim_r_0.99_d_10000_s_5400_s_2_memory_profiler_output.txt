sim_r_0.99_d_10000_s_5400_s_2
running asap...
source .../home/BCCRC.CA/ssubedi/projects/experiments/asapp/figures/fig_3_b/data/sim_r_0.99_d_10000_s_5400_s_2*
Dataset : sim_r_0.99_d_10000_s_5400_s_2 , cells : 70200, genes : 17204
None
Generating common genes...
Merging datasets...
processing.../home/BCCRC.CA/ssubedi/projects/experiments/asapp/figures/fig_3_b/results/sim_r_0.99_d_10000_s_5400_s_2
processing...sim_r_0.99_d_10000_s_5400_s_2
completed.
996
(996, 1801)
933
(933, 1809)
952
(952, 1765)
Filename: /home/BCCRC.CA/ssubedi/projects/experiments/asapp/figures/fig_3_b/step2_nmf.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    49    411.2 MiB    411.2 MiB           1   @profile
    50                                         def _asap(sample,data_size,wdir,n_topics,cluster_resolution):
    51                                         	
    52    465.9 MiB     54.7 MiB           1   	asappy.create_asap_data(sample,working_dirpath=wdir)
    53                                         	
    54    465.9 MiB      0.0 MiB           1   	number_batches = 1
    55    465.9 MiB      0.0 MiB           1   	asap_data_size = 25000
    56                                          
    57    465.9 MiB      0.0 MiB           1   	if data_size[0]>asap_data_size: 
    58    465.9 MiB      0.0 MiB           1   		number_batches = np.ceil(data_size[0]/asap_data_size)
    59                                           
    60    468.9 MiB      3.0 MiB           1   	asap_object = asappy.create_asap_object(sample=sample,data_size=asap_data_size,number_batches=number_batches,working_dirpath=wdir)
    61                                          
    62   7512.5 MiB   7043.6 MiB           1   	asappy.generate_pseudobulk(asap_object,tree_depth=10,normalize_pb='lscale')
    63   7496.2 MiB    -16.3 MiB           1   	asappy.asap_nmf(asap_object,num_factors=n_topics,seed=seed)
    64                                         
    65   7501.6 MiB      5.3 MiB           1   	asap_adata = asappy.generate_model(asap_object,return_object=True)
    66                                          	
    67   8031.6 MiB    530.1 MiB           1   	asappy.leiden_cluster(asap_adata,resolution=cluster_resolution)
    68                                         
    69   8036.2 MiB      4.6 MiB           1   	ct = getct(asap_adata.obs.index.values)
    70                                         
    71   8036.2 MiB      0.0 MiB           1   	cluster = asap_adata.obs.cluster.values
    72                                         
    73   8036.2 MiB      0.0 MiB           1   	s1  = calculate_purity(ct,cluster)
    74                                         
    75   8039.2 MiB      3.0 MiB           1   	s2,s3 = calc_score(ct,cluster)
    76                                         	
    77   8039.2 MiB      0.0 MiB           1   	return s1,s2,s3


running liger....
Filename: /home/BCCRC.CA/ssubedi/projects/experiments/asapp/figures/fig_3_b/step2_nmf.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    79   8039.5 MiB   8039.5 MiB           1   @profile
    80                                         def _ligerpipeline(data_file,K,cluster_resolution):
    81                                         
    82   8039.5 MiB      0.0 MiB           1   	from sklearn.model_selection import train_test_split
    83   8041.6 MiB      2.0 MiB           1   	import pyliger
    84                                          
    85   8041.6 MiB      0.0 MiB           1   	f = hf.File(data_file,'r')
    86   8041.6 MiB      0.0 MiB           1   	data_size = tuple(f['matrix']['shape'])
    87  17273.7 MiB   9232.1 MiB           1   	mtx = csr_matrix((f['matrix']['data'], f['matrix']['indices'], f['matrix']['indptr']), shape=data_size).toarray()
    88  17276.0 MiB      1.7 MiB       17207   	var = [x.decode('utf-8') for x in list(f['matrix']['features']['id']) ]
    89  17282.9 MiB      2.6 MiB       70203   	obs = [x.decode('utf-8') for x in list(f['matrix']['barcodes']) ]
    90  17280.7 MiB     -2.2 MiB           1   	f.close()
    91                                         
    92                                         
    93  17284.9 MiB      4.1 MiB           1   	adata = an.AnnData(mtx)
    94  17284.9 MiB      0.0 MiB           1   	dfvars = pd.DataFrame(var)
    95  17284.9 MiB      0.0 MiB           1   	dfobs = pd.DataFrame(obs)
    96  17282.1 MiB     -2.7 MiB           1   	adata.obs = dfobs
    97  17281.4 MiB     -0.8 MiB           1   	adata.var = dfvars
    98  17281.4 MiB      0.0 MiB           1   	adata.var.rename(columns={0:'gene'},inplace=True) 
    99  17281.4 MiB      0.0 MiB           1   	adata.obs.rename(columns={0:'cell'},inplace=True) 
   100  17281.4 MiB      0.0 MiB           1   	adata.obs.index.name = 'cell'
   101  17281.4 MiB      0.0 MiB           1   	adata.var.index.name = 'gene'
   102                                         
   103  17281.4 MiB      0.0 MiB           1   	test_size = 0.5
   104  17281.4 MiB      0.0 MiB           1   	adata_train, adata_test = train_test_split(adata, test_size=test_size, random_state=42)
   105                                         
   106  21890.0 MiB   4608.6 MiB           1   	adata_train.uns['sample_name'] = 'train'
   107  26500.3 MiB   4610.3 MiB           1   	adata_test.uns['sample_name'] = 'test'
   108  26500.3 MiB      0.0 MiB           1   	adata_list = [adata_train,adata_test]
   109                                         
   110                                         
   111  27787.5 MiB   1287.3 MiB           1   	ifnb_liger = pyliger.create_liger(adata_list,remove_missing=False)
   112                                          
   113  29070.7 MiB   1283.1 MiB           1   	pyliger.normalize(ifnb_liger)
   114                                          
   115  19856.7 MiB  -9214.0 MiB           1   	pyliger.select_genes(ifnb_liger)
   116                                         	
   117  19856.7 MiB      0.0 MiB           1   	gene_use = 2000
   118  19856.7 MiB      0.0 MiB           1   	ifnb_liger.adata_list[0].uns['var_gene_idx'] = ifnb_liger.adata_list[0].var['norm_var'].sort_values(ascending=False).index.values[:gene_use]
   119  19856.7 MiB      0.0 MiB           1   	ifnb_liger.adata_list[1].uns['var_gene_idx'] = ifnb_liger.adata_list[1].var['norm_var'].sort_values(ascending=False).index.values[:gene_use]
   120  19856.7 MiB      0.0 MiB           1   	ifnb_liger.var_genes = np.union1d(ifnb_liger.adata_list[0].uns['var_gene_idx'],ifnb_liger.adata_list[1].uns['var_gene_idx'])
   121                                           
   122  27554.7 MiB   7698.0 MiB           1   	pyliger.scale_not_center(ifnb_liger)
   123  26304.1 MiB  -1250.6 MiB           1   	pyliger.optimize_ALS(ifnb_liger, k = K,rand_seed=seed)
   124  25029.4 MiB  -1274.7 MiB           1   	pyliger.quantile_norm(ifnb_liger)
   125  25169.8 MiB    140.4 MiB           1   	pyliger.leiden_cluster(ifnb_liger,resolution=cluster_resolution)
   126                                         
   127  25169.8 MiB      0.0 MiB           1   	obs = list(ifnb_liger.adata_list[0].obs.cell.values) + list(ifnb_liger.adata_list[1].obs.cell.values)
   128  25169.8 MiB      0.0 MiB           1   	cluster = list(ifnb_liger.adata_list[0].obs.cluster.values) + list(ifnb_liger.adata_list[1].obs.cluster.values)
   129                                         	
   130  25169.8 MiB      0.0 MiB           1   	ct = getct(obs)
   131                                         
   132  25169.8 MiB      0.0 MiB           1   	s1  = calculate_purity(ct,cluster)
   133                                         
   134  25169.8 MiB      0.0 MiB           1   	s2,s3 = calc_score(ct,cluster)
   135                                         	
   136  25169.8 MiB      0.0 MiB           1   	return s1,s2,s3


